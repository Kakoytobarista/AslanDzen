from django.core.exceptions import PermissionDenied
from django.http import HttpRequest, HttpResponse
from typing import Callable

class FilterIPMiddleware:
    """
    Middleware to filter requests based on IP addresses.

    This middleware denies requests from specified IP addresses.

    Attributes:
        get_response (Callable): The next middleware or view function in the request/response chain.
    """

    def __init__(self, get_response: Callable) -> None:
        """
        Initialize the middleware.

        Args:
            get_response (Callable): The next middleware or view function in the request/response chain.
        """
        self.get_response = get_response

    def __call__(self, request: HttpRequest) -> HttpResponse:
        """
        Process the incoming request.

        If the request's IP address is in the blocked_ips list, raise PermissionDenied.

        Args:
            request (HttpRequest): The incoming request.

        Returns:
            HttpResponse: The response generated by the middleware or subsequent middleware/view.
        """
        blocked_ips = ['141.255.166.2', '195.154.211.56']
        ip = request.META.get('REMOTE_ADDR')

        if ip in blocked_ips:
            raise PermissionDenied

        response = self.get_response(request)

        return response
